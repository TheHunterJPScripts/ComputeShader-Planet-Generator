// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "/Includes/Noise.compute"

struct vec3 {
	float x;
	float y;
	float z;
};

RWStructuredBuffer<vec3> input;
RWStructuredBuffer<vec3> output;
float radius;
// Noise settings
RWStructuredBuffer<vec3> offsets;
int octaves;
float lacunarity;
float persistence;
float noiseScale;
float weightMultiplier;

float noiseCalculation(vec3 p)
{
	float3 pos = float3(p.x,p.y,p.z);

	float noise = 0;

	float frequency = noiseScale / 200;
	float amplitude = 1;
	float weight = 1;
	for (int j = 0; j < octaves; j++) {
		float3 npos = pos * frequency;
		npos.x = npos.x + offsets[j].x;
		npos.y = npos.y + offsets[j].y;
		npos.z = npos.z + offsets[j].z;
		float n = snoise(npos);
		float v = 1 - abs(n);
		v = v * v;
		v = v * 2 - 1;
		noise += v * amplitude;
		amplitude *= persistence;
		frequency *= lacunarity;
		weight += amplitude;
	}
	noise = noise / weight;
	noise = (clamp(noise, 0.3, 1) - .3) * weightMultiplier;

	float noise2;
	frequency = noiseScale / 100;
	amplitude = 1;
	weight = 1;
	for (int k = 0; k < octaves; k++) {
		float3 npos = pos * frequency;
		npos.x = npos.x + offsets[k].x;
		npos.y = npos.y + offsets[k].y;
		npos.z = npos.z + offsets[k].z;
		float n = snoise(npos);
		float v = 1 - abs(n);
		v = n;
		noise2 += v * amplitude;
		amplitude *= persistence;
		frequency *= lacunarity;
	}
	noise2 = noise2 / 2;

	return noise2 + noise;
}

[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float3 temp = float3(0,0,0);
	temp.x = input[id.x].x;
	temp.y = input[id.x].y;
	temp.z = input[id.x].z;
	float noise = noiseCalculation(input[id.x]) + radius;
	
	float3 normal = normalize(temp);
	
	output[id.x].x = normal.x * noise;
	output[id.x].y = normal.y * noise;
	output[id.x].z = normal.z * noise;
}
